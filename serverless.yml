service:
  name: energyNotifier

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  environment:
    DAILY_POWER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    DOMAIN_SUFFIX: com
  timeout: 900
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DAILY_POWER_TABLE}"
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: "arn:aws:lambda:${opt:region, self:provider.region}:*:function/checkPower"
    - Effect: Allow
      Action:
        - cognito-identity:GetId
        - cognito-identity:SetIdentityPoolRoles
        - cognito-identity:ListIdentityPools
        - cognito-identity:CreateIdentityPool
        - cognito-identity:UnlinkIdentity
        - cognito-identity:DeleteIdentities
        - cognito-identity:GetOpenIdToken
        - cognito-identity:DescribeIdentity
        - cognito-identity:GetCredentialsForIdentity
      Resource:
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function/getUsers"
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function/setLimits"
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function/getLimits"
    - Effect: Allow
      Action:
        - cognito-idp:ForgotPassword
        - cognito-idp:GlobalSignOut,
        - cognito-idp:ConfirmSignUp"
        - cognito-identity:ListIdentityPools"
        - cognito-idp:CreateUserPool"
        - cognito-identity:CreateIdentityPool"
        - cognito-identity:GetOpenIdToken
        - cognito-idp:ForgetDevice
        - cognito-identity:GetId
        - cognito-identity:SetIdentityPoolRoles
        - cognito-identity:DeleteIdentities
        - cognito-idp:GetUserAttributeVerificationCode
        - cognito-idp:DeleteUser
        - cognito-idp:InitiateAuth
        - cognito-idp:SetUserMFAPreference
        - cognito-identity:DescribeIdentity
        - cognito-idp:ConfirmForgotPassword
        - cognito-idp:GetUser
        - cognito-idp:SetUserSettings
        - cognito-idp:SignUp
        - cognito-idp:VerifyUserAttribute
        - cognito-idp:ListDevices
        - cognito-idp:ListUserPools
        - cognito-idp:AssociateSoftwareToken
        - cognito-idp:VerifySoftwareToken
        - cognito-idp:GetDevice
        - cognito-idp:DeleteUserAttributes
        - cognito-idp:RespondToAuthChallenge
        - cognito-idp:UpdateUserAttributes
        - cognito-idp:DescribeUserPoolDomain
        - cognito-identity:UnlinkIdentity
        - cognito-idp:UpdateDeviceStatus
        - cognito-idp:ChangePassword
        - cognito-idp:ConfirmDevice
        - cognito-idp:ResendConfirmationCode
        - cognito-identity:GetCredentialsForIdentity
      Resource:
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function/getUsers"
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function/setLimits"
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function/getLimits"

functions:
  checkPower:
    handler: src/processPower.processPower
    events:
      - schedule: cron(0 16 * * ? *)
  getUsers:
    handler: src/getUsers.getUsers
  setLimits:
    handler: src/setLimits.setLimits
    events:
      - http:
          path: set
          method: post
  getLimits:
    handler: src/getLimits.getLimits
    events:
      - http:
          path: get
          method: get

resources:
  Resources:
    DailyPowerDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: date_id
            AttributeType: N
        KeySchema:
          - AttributeName: date_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DAILY_POWER_TABLE}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:service}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: upper_power_import
            AttributeDataType: String
            Mutable: true
          - Name: lower_power_import
            AttributeDataType: String
            Mutable: true
          - Name: upper_power_export
            AttributeDataType: String
            Mutable: true
          - Name: lower_power_export
            AttributeDataType: String
            Mutable: true
          - Name: utility_provider
            AttributeDataType: String
            Mutable: true
          - Name: product_import
            AttributeDataType: String
            Mutable: true
          - Name: tariff_import
            AttributeDataType: String
            Mutable: true
          - Name: product_export
            AttributeDataType: String
            Mutable: true
          - Name: tariff_export
            AttributeDataType: String
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: true
            RequireUppercase: false
            RequireNumbers: true
            RequireSymbols: false
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:service}-user-pool-client
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: CognitoUserPool
        CallbackURLs:
          - https://www.bbc.co.uk
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
